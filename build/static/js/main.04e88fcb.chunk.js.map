{"version":3,"sources":["Home.js","serviceWorker.js","index.js"],"names":["Home","props","state","a","query","autoBind","handleClick","bind","handleChangeQuery","e","this","setState","b","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wSAyEeA,G,kBApEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KACDC,MAAQ,CACTC,GAAG,EACHC,MAAO,MAEXC,IAAS,gBACT,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,kBAAoB,EAAKA,kBAAkBD,KAAvB,gBARV,E,yEAUPE,GACRC,KAAKC,SACD,CAAEC,GAAIF,KAAKR,MAAMC,M,wCAGPM,GACdC,KAAKC,SAAS,CACVP,MAAO,iB,+BAKX,OACI,yBAAKS,UAAU,QACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,SAAf,UADJ,KAaA,yBAAKA,UAAU,QAAf,U,GAtCGC,cCQCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD0H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.04e88fcb.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport autoBind from 'react-autobind';\r\nimport './Home.css';\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            a: true,\r\n            query: null\r\n        }\r\n        autoBind(this)\r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleChangeQuery = this.handleChangeQuery.bind(this);\r\n    }\r\n    handleClick(e) {\r\n        this.setState(\r\n            { b: !this.state.a }\r\n        );\r\n    }\r\n    handleChangeQuery(e) {\r\n        this.setState({\r\n            query: \"query text\"\r\n        });\r\n    }\r\n\r\n    rendar() {\r\n        return (\r\n            <div className=\"Home\">\r\n                <div className=\"Page-header\">\r\n                    <div className=\"title\">D-PENS</div> {/* inline-blockにする */}\r\n                    {/* <div className=\"search\">\r\n                            <label>\r\n                                検索:\r\n                        <input\r\n                                    type=\"text\"\r\n                                    value={this.state.query}\r\n                                    onChange={(event) => this.handleChangeName(event)} />\r\n                            </label>\r\n                        </div> */}\r\n                </div>\r\n\r\n                <div className=\"Home\">\r\n                    a\r\n                        {/* <HomeHeader />\r\n                        <HomeBody /> */}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n// function HomeHeader(props) {\r\n//     return (\r\n//         <div className=\"Home-header\">\r\n//             a\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// function HomeBody(props) {\r\n//     return (\r\n//         <div className='Home-body'>\r\n//             <div classname='Home-box Home-recentry'>\r\n//             </div>\r\n//             <div className='Home-box Home-category'>\r\n//             </div>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import App from './App';\nimport Home from './Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}